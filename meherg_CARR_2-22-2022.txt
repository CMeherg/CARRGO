# -*- coding: utf-8 -*-
"""
Created on Fri Feb 18 16:44:22 2022

@author: cdmeh
"""

# Imports necessary modules
import numpy as np
import matplotlib.pyplot as plt
import scipy.integrate as scint

# Plots a series of comparison curves between CARRGO and
# the new Bertanlaffy model.
def main():
    
    x1,y1 = CARRGO([0,0,0],0)
    x2,y2 = CARRGO([0,0,0],0.5)
    x3,y3 = CARRGO([0.25,0.25,0.25],0.5)
    u1,v1 = NEWGO([0,0,0],0)
    u2,v2 = NEWGO([0,0,0],0.5)
    u3,v3 = NEWGO([0.25,0.25,0.25],0.5)
    t = np.linspace(0,40,len(x1))
    label1 = ["CARRGO: No Dose","CARRGO: One Dose","CARRGO: Four Doses", "New: No Dose","New: One Dose","New: Four Doses"]
    plt.figure(1)
    plt.grid(True)
    plt.title("Possible Dynamics of Glioma/CAR T-Cell Interaction")
    plt.ylabel("Cancer Cell Count")
    plt.xlabel("Time Elapsed")
    plt.plot(t,x1, label = label1[0])
    plt.plot(np.linspace(0,40,len(x2)),x2, label = label1[1])
    plt.plot(np.linspace(0,40,len(x3)),x3, label = label1[2])
    plt.plot(np.linspace(0,40,len(u1)),u1, label = label1[3])
    plt.plot(np.linspace(0,40,len(u1)),u2, label = label1[4])
    plt.plot(np.linspace(0,40,len(u1)),u3, label = label1[5])
    plt.legend()
    plt.show()
    plt.close(fig = 1)
    plt.figure(2)
    plt.grid(True)
    plt.title("Possible Dynamics of Glioma/CAR T-Cell Interaction")
    plt.ylabel("CAR T-Cell Count")
    plt.xlabel("Time Elapsed")
    plt.plot(t,y1, label = label1[0])
    plt.plot(np.linspace(0,40,len(y2)),y2, label = label1[1])
    plt.plot(np.linspace(0,40,len(y3)),y3, label = label1[2])
    plt.plot(np.linspace(0,40,len(u1)),v1, label = label1[3])
    plt.plot(np.linspace(0,40,len(u1)),v2, label = label1[4])
    plt.plot(np.linspace(0,40,len(u1)),v3, label = label1[5])
    plt.legend()
    plt.show()
    plt.close(fig = 2)
    plt.figure(3)
    plt.grid(True)
    plt.title("Dose Schedule Comparison: CARRGO")
    plt.ylabel("Cancer Cell Count")
    plt.xlabel("Time Elapsed")
    plt.plot(np.linspace(0,40,len(x2)),x2, label = label1[1])
    plt.plot(np.linspace(0,40,len(x3)),x3, label = label1[2])
    plt.plot(np.linspace(0,40,len(x1)),x1, label = label1[0])
    plt.legend()
    plt.show()
    plt.close()
    plt.figure(4)
    plt.grid(True)
    plt.title("Dose Schedule Comparison: New Model")
    plt.ylabel("Cancer Cell Count")
    plt.xlabel("Time Elapsed")
    plt.plot(np.linspace(0,40,len(u2)),u2, label = label1[4])
    plt.plot(np.linspace(0,40,len(u3)),u3, label = label1[5])
    plt.plot(np.linspace(0,40,len(u1)),u1, label = label1[3])
    plt.legend()
    plt.show()
    plt.close()
    plt.figure(5)
    plt.grid(True)
    plt.title("Dose Schedule Comparison: New Model")
    plt.ylabel("Car T-Cell Count")
    plt.xlabel("Time Elapsed")
    plt.plot(np.linspace(0,40,len(v2)),v2, label = label1[4])
    plt.plot(np.linspace(0,40,len(v3)),v3, label = label1[5])
    plt.plot(np.linspace(0,40,len(v1)),v1, label = label1[3])
    plt.legend()
    plt.show()
    plt.close()
    plt.figure(6)
    plt.grid(True)
    plt.title("Model Comparison: No Dose")
    plt.ylabel("Cancer Cell Count")
    plt.xlabel("Time Elapsed")
    plt.plot(np.linspace(0,40,len(x1)),x1, label = label1[0])
    plt.plot(np.linspace(0,40,len(u1)),u1, label = label1[3])
    plt.legend()
    plt.show()
    plt.close()
    plt.figure(6)
    plt.grid(True)
    plt.title("Model Comparison: One Dose")
    plt.ylabel("Cancer Cell Count")
    plt.xlabel("Time Elapsed")
    plt.plot(np.linspace(0,40,len(x2)),x2, label = label1[1])
    plt.plot(np.linspace(0,40,len(u2)),u2, label = label1[4])
    plt.legend()
    plt.show()
    plt.close()
    plt.figure(6)
    plt.grid(True)
    plt.title("Model Comparison: Four Doses")
    plt.ylabel("Cancer Cell Count")
    plt.xlabel("Time Elapsed")
    plt.plot(np.linspace(0,40,len(x3)),x3, label = label1[2])
    plt.plot(np.linspace(0,40,len(u3)),u3, label = label1[5])
    plt.legend()
    plt.show()
    plt.close()
    plt.close()
    plt.figure(8)
    plt.grid(True)
    plt.title("Model Comparison: One Dose")
    plt.ylabel("CAR T-Cell Count")
    plt.xlabel("Time Elapsed")
    plt.plot(np.linspace(0,40,len(y2)),y2, label = label1[1])
    plt.plot(np.linspace(0,40,len(v2)),v2, label = label1[4])
    plt.legend()
    plt.show()
    plt.close()
    plt.figure(9)
    plt.grid(True)
    plt.title("Model Comparison: Four Doses")
    plt.ylabel("CAR T-Cell Count")
    plt.xlabel("Time Elapsed")
    plt.plot(np.linspace(0,40,len(y3)),y3, label = label1[2])
    plt.plot(np.linspace(0,40,len(v3)),v3, label = label1[5])
    plt.legend()
    plt.show()
    plt.close()
    
    
    
def CARRGO(DOSE,y):
    # Parameters of the simulation
    # Final Time
    tf = 40
    # Number of steps
    n = 1000
    # Number of plotted trajectories
    tspan = (0,tf)
    # Initial Killing/Growth Ratios
    y0 = [y]
    # System parameters
    A = 1.4
    B = 1.6
    C = 1
    L = 1
    M = 1
    
    
    # Established initial Cancer to Carrying Capacity Ratio based on 
    # Killing/Growth Ratio
    for i in range(len(y0)):
        if y0[i] < 1:
            x0 = 0.5
        else:
            x0 = 1
    # Creates initial state vector
    z0 = np.array([x0,y0[i]])
    # Differential Equation Solver
    sol1 = scint.solve_ivp(dz,(0,tf//4),z0, args = (A,B,C,L,M),max_step = tspan[-1]/n)
    sol2 = scint.solve_ivp(dz,(0,tf//4),[sol1.y[0][-1],sol1.y[1][-1]+DOSE[0]], args = (A,B,C,L,M),max_step = tspan[-1]/n)
    sol3 = scint.solve_ivp(dz,(0,tf//4),[sol2.y[0][-1],sol2.y[1][-1]+DOSE[1]], args = (A,B,C,L,M),max_step = tspan[-1]/n)
    sol4= scint.solve_ivp(dz,(0,tf//4),[sol3.y[0][-1],sol3.y[1][-1]+DOSE[2]], args = (A,B,C,L,M),max_step = tspan[-1]/n)
    sx = np.hstack((sol1.y[0],sol2.y[0],sol3.y[0],sol4.y[0]))
    sy = np.hstack((sol1.y[1],sol2.y[1],sol3.y[1],sol4.y[1]))
    # Plots trajectories and boundary between regions of concavity
    
    return sx,sy
# Takes in state vector and outputs time derivative
def dz(t,z0,A,B,C,L,M):
    return [A*z0[0]*(1 - z0[0]/B - C*z0[1]),L*z0[0]*z0[1] - M*z0[1]]
def NEWGO(DOSE,y):
    # Parameters of the simulation
    # Final Time
    tf = 40
    # Number of steps
    n = 1000
    # Number of plotted trajectories
    m = 15
    tspan = (0,tf)
    # Initial Killing/Growth Ratios
    y0 = [y]
    # System parameters
    A = 1.87
    B = 1.6
    C = 1
    L = 1
    M = 1
    
    # Established initial Cancer to Carrying Capacity Ratio based on 
    # Killing/Growth Ratio
    for i in range(len(y0)):
        if y0[i] < 1:
            x0 = 0.5
        else:
            x0 = 1
    # Creates initial state vector
    z0 = np.array([x0,y0[i]])
    # Differential Equation Solver
    sol1 = scint.solve_ivp(dw,(0,tf//4),z0, args = (A,B,C,L,M),max_step = tspan[-1]/n)
    sol2 = scint.solve_ivp(dw,(0,tf//4),[sol1.y[0][-1],sol1.y[1][-1]+DOSE[0]], args = (A,B,C,L,M),max_step = tspan[-1]/n)
    sol3 = scint.solve_ivp(dw,(0,tf//4),[sol2.y[0][-1],sol2.y[1][-1]+DOSE[1]], args = (A,B,C,L,M),max_step = tspan[-1]/n)
    sol4= scint.solve_ivp(dw,(0,tf//4),[sol3.y[0][-1],sol3.y[1][-1]+DOSE[2]], args = (A,B,C,L,M),max_step = tspan[-1]/n)
    sx = np.hstack((sol1.y[0],sol2.y[0],sol3.y[0],sol4.y[0]))
    sy = np.hstack((sol1.y[1],sol2.y[1],sol3.y[1],sol4.y[1]))
    # Plots trajectories and boundary between regions of concavity
    
    return sx,sy
def dw(t,z,A,B,C,L,M):
    return [(z[0]**(2/3))*(A - B*(z[0]**(1/3)) - C*z[1]),z[1]*(L*(z[0]**(2/3)) - M)]

# Executes function
main()